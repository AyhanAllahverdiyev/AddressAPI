@page
@model AddressesModel
@{
    ViewData["Title"] = "Addresses";
}

<h2>Addresses</h2>

<style>
    /* CSS */
    .table th,
    .table td {
        text-align: left;
    }

    .sortable th {
        cursor: pointer;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: yellow;
    }

    .table-hover tbody tr:hover {
        background-color: red;
    }
</style>

<div class="table-responsive">
    <table class="table table-striped table-hover sortable">
        <thead class="thead-dark">
            <tr>
                <th data-sortable="true">Id</th>
                <th data-sortable="true">Name</th>
                <th data-sortable="true">Year</th>
                <th data-sortable="true">Location</th>
                <th data-sortable="false">Residents</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var address in Model.Addresses)
            {
                <tr>
                    <td>@address.Id</td>
                    <td>@address.Name</td>
                    <td>@address.Year</td>
                    <td>@address.Location</td>
                    <td>@string.Join(", ", address.Residents)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>// JavaScript
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.sortable th').forEach(headerCell => {
            headerCell.addEventListener('click', () => {
                const tableElement = headerCell.closest('table');
                const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
                const isAscending = headerCell.classList.contains('asc');
                const dataRows = Array.from(tableElement.querySelectorAll('tbody > tr'));

                dataRows.sort((rowA, rowB) => {
                    const cellA = rowA.children[headerIndex].textContent.trim();
                    const cellB = rowB.children[headerIndex].textContent.trim();

                    if (cellA < cellB) {
                        return isAscending ? -1 : 1;
                    } else if (cellA > cellB) {
                        return isAscending ? 1 : -1;
                    }
                    return 0;
                });

                tableElement.querySelector('th.asc, th.desc').classList.remove('asc', 'desc');
                headerCell.classList.toggle('asc', !isAscending);
                headerCell.classList.toggle('desc', isAscending);

                tableElement.querySelector('tbody').append(...dataRows);
            });
        });
    });</script>
